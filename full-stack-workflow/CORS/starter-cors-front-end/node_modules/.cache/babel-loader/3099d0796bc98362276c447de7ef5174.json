{"ast":null,"code":"/**\n * Fetch `json` from the specified URL and handle error status codes and ignore `AbortError`s\n *\n * This function is NOT exported because it is not needed outside of this file.\n *\n * @param url\n *  the url for the requst.\n * @param options\n *  any options for fetch\n * @returns {Promise<Error|any>}\n *  a promise that resolves to the `json` data or an error.\n *  If the response is not in the 200 - 399 range the promise is rejected.\n */\nexport async function fetchFrom(url, options) {\n  try {\n    const response = await fetch(url, { ...options\n    });\n\n    if (response.status === 204) {\n      return null;\n    }\n\n    const payload = await response.json();\n\n    if (payload.error) {\n      return Promise.reject({\n        message: payload.error\n      });\n    }\n\n    return payload.data;\n  } catch (error) {\n    if (error.name !== \"AbortError\") {\n      console.error(error.stack);\n      return Promise.reject({\n        message: error.message\n      });\n    }\n  }\n}","map":{"version":3,"sources":["/Users/austinjones/Documents/thinkful/full-stack-workflow/CORS/starter-cors-front-end/src/utils/api.js"],"names":["fetchFrom","url","options","response","fetch","status","payload","json","error","Promise","reject","message","data","name","console","stack"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,eAAeA,SAAf,CAAyBC,GAAzB,EAA8BC,OAA9B,EAAuC;AAC5C,MAAI;AACF,UAAMC,QAAQ,GAAG,MAAMC,KAAK,CAACH,GAAD,EAAM,EAAE,GAAGC;AAAL,KAAN,CAA5B;;AAEA,QAAIC,QAAQ,CAACE,MAAT,KAAoB,GAAxB,EAA6B;AAC3B,aAAO,IAAP;AACD;;AAED,UAAMC,OAAO,GAAG,MAAMH,QAAQ,CAACI,IAAT,EAAtB;;AAEA,QAAID,OAAO,CAACE,KAAZ,EAAmB;AACjB,aAAOC,OAAO,CAACC,MAAR,CAAe;AAAEC,QAAAA,OAAO,EAAEL,OAAO,CAACE;AAAnB,OAAf,CAAP;AACD;;AACD,WAAOF,OAAO,CAACM,IAAf;AACD,GAbD,CAaE,OAAOJ,KAAP,EAAc;AACd,QAAIA,KAAK,CAACK,IAAN,KAAe,YAAnB,EAAiC;AAC/BC,MAAAA,OAAO,CAACN,KAAR,CAAcA,KAAK,CAACO,KAApB;AACA,aAAON,OAAO,CAACC,MAAR,CAAe;AAAEC,QAAAA,OAAO,EAAEH,KAAK,CAACG;AAAjB,OAAf,CAAP;AACD;AACF;AACF","sourcesContent":["/**\n * Fetch `json` from the specified URL and handle error status codes and ignore `AbortError`s\n *\n * This function is NOT exported because it is not needed outside of this file.\n *\n * @param url\n *  the url for the requst.\n * @param options\n *  any options for fetch\n * @returns {Promise<Error|any>}\n *  a promise that resolves to the `json` data or an error.\n *  If the response is not in the 200 - 399 range the promise is rejected.\n */\nexport async function fetchFrom(url, options) {\n  try {\n    const response = await fetch(url, { ...options });\n\n    if (response.status === 204) {\n      return null;\n    }\n\n    const payload = await response.json();\n\n    if (payload.error) {\n      return Promise.reject({ message: payload.error });\n    }\n    return payload.data;\n  } catch (error) {\n    if (error.name !== \"AbortError\") {\n      console.error(error.stack);\n      return Promise.reject({ message: error.message });\n    }\n  }\n}\n"]},"metadata":{},"sourceType":"module"}
{"ast":null,"code":"var _jsxFileName = \"/Users/austinjones/Documents/thinkful/react-apis-hooks/effect-hook/do-this/app/src/ProfileEdit.jsx\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function ProfileEdit() {\n  _s();\n\n  const [user, setUser] = useState({});\n\n  const changeHandler = event => {\n    setUser({ ...user,\n      [event.target.name]: event.target.value\n    });\n  };\n\n  const submitHandler = async event => {\n    event.preventDefault();\n    const response = await fetch(`https://jsonplaceholder.typicode.com/users/${user.id}`, {\n      method: \"PUT\",\n      body: JSON.stringify(user)\n    });\n    const savedData = await response.json();\n    console.log(\"Saved user!\", savedData);\n  };\n\n  useEffect(() => {\n    async function loadUsers() {\n      const response = await fetch(\"https://jsonplaceholder.typicode.com/users/1\");\n      const userFromAPI = await response.json();\n      setUser(userFromAPI);\n    }\n\n    loadUsers();\n  }, []); // Passing [] so that it only runs the effect once\n\n  useEffect(() => {\n    if (user.name) {\n      document.title = `${user.name} : Edit Profile`;\n    } else {\n      document.title = \"Edit Profile\";\n    }\n  }, [user]); // Rerun this effect when the user changes\n\n  if (user.id) {\n    // `user.id` is truthy after the API call returns\n    return /*#__PURE__*/_jsxDEV(\"form\", {\n      name: \"profileEdit\",\n      onSubmit: submitHandler,\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          htmlFor: \"username\",\n          children: \"User Name:\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 45,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          id: \"username\",\n          name: \"username\",\n          type: \"text\",\n          value: user.username,\n          required: true,\n          onChange: changeHandler\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 46,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 44,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          htmlFor: \"email\",\n          children: \"Email:\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 56,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          id: \"email\",\n          name: \"email\",\n          type: \"email\",\n          value: user.email,\n          required: true,\n          onChange: changeHandler\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 57,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 55,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        type: \"submit\",\n        children: \"Submit\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 66,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 43,\n      columnNumber: 7\n    }, this);\n  }\n\n  return \"Loading...\";\n}\n\n_s(ProfileEdit, \"9rrlmW18dif2CWdjQtBz3mD1j4E=\");\n\n_c = ProfileEdit;\n\nvar _c;\n\n$RefreshReg$(_c, \"ProfileEdit\");","map":{"version":3,"sources":["/Users/austinjones/Documents/thinkful/react-apis-hooks/effect-hook/do-this/app/src/ProfileEdit.jsx"],"names":["React","useState","useEffect","ProfileEdit","user","setUser","changeHandler","event","target","name","value","submitHandler","preventDefault","response","fetch","id","method","body","JSON","stringify","savedData","json","console","log","loadUsers","userFromAPI","document","title","username","email"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from \"react\";\n\nexport default function ProfileEdit() {\n  const [user, setUser] = useState({});\n\n  const changeHandler = (event) => {\n    setUser({ ...user, [event.target.name]: event.target.value });\n  };\n\n  const submitHandler = async (event) => {\n    event.preventDefault();\n    const response = await fetch(\n      `https://jsonplaceholder.typicode.com/users/${user.id}`,\n      {\n        method: \"PUT\",\n        body: JSON.stringify(user),\n      }\n    );\n    const savedData = await response.json();\n    console.log(\"Saved user!\", savedData);\n  };\n\n  useEffect(() => {\n    async function loadUsers() {\n      const response = await fetch(\"https://jsonplaceholder.typicode.com/users/1\");\n      const userFromAPI = await response.json();\n      setUser(userFromAPI);\n    }\n    loadUsers();\n  }, []); // Passing [] so that it only runs the effect once\n\n  useEffect(() => {\n    if (user.name) {\n      document.title = `${user.name} : Edit Profile`;\n    } else {\n      document.title = \"Edit Profile\";\n    }\n  }, [user]); // Rerun this effect when the user changes\n\n  if (user.id) {\n    // `user.id` is truthy after the API call returns\n    return (\n      <form name=\"profileEdit\" onSubmit={submitHandler}>\n        <div>\n          <label htmlFor=\"username\">User Name:</label>\n          <input\n            id=\"username\"\n            name=\"username\"\n            type=\"text\"\n            value={user.username}\n            required={true}\n            onChange={changeHandler}\n          />\n        </div>\n        <div>\n          <label htmlFor=\"email\">Email:</label>\n          <input\n            id=\"email\"\n            name=\"email\"\n            type=\"email\"\n            value={user.email}\n            required={true}\n            onChange={changeHandler}\n          />\n        </div>\n        <button type=\"submit\">Submit</button>\n      </form>\n    );\n  }\n  return \"Loading...\";\n}\n"]},"metadata":{},"sourceType":"module"}
{"ast":null,"code":"export const deletePost = ignoreAbortError(deletePostDelegate);\nexport const fetchUsersWithPosts = ignoreAbortError(fetchUsersWithPostsDelegate);\nexport const fetchUserWithPosts = ignoreAbortError(fetchUserWithPostsDelegate);\n\nfunction ignoreAbortError(delegate) {\n  return async (...delegateArguments) => {\n    try {\n      return await delegate.apply(null, delegateArguments);\n    } catch (error) {\n      if (error.name !== \"AbortError\") {\n        throw error;\n      }\n    }\n  };\n}\n\nasync function deletePostDelegate(postId, signal) {\n  const url = `https://jsonplaceholder.typicode.com/posts/${postId}`;\n  const response = await fetch(url, {\n    method: \"DELETE\",\n    signal\n  });\n  return response.json();\n}\n\nasync function fetchUserWithPostsDelegate(userId, signal) {\n  const url = `https://jsonplaceholder.typicode.com/users/${userId}`;\n  const response = await fetch(url, {\n    signal\n  });\n\n  if (response.status !== 200) {\n    throw new Error(`User not found with ID: ${userId}`);\n  }\n\n  const user = await response.json();\n  user.posts = await fetchPostsForUser(userId, signal);\n  return user;\n}\n\nasync function fetchUsersWithPostsDelegate(signal) {\n  try {\n    const users = await fetchUsers(signal);\n    return await Promise.all(users.map(user => fetchPostsForUser(user.id, signal).then(posts => {\n      user.posts = posts;\n      return user;\n    })));\n  } catch (error) {\n    if (error.name !== \"AbortError\") {\n      throw error;\n    }\n  }\n}\n\nasync function fetchUsers(signal) {\n  const url = `https://jsonplaceholder.typicode.com/users`;\n  const response = await fetch(url, {\n    signal\n  });\n  return response.json();\n}\n\nasync function fetchPostsForUser(userId, signal) {\n  const url = `https://jsonplaceholder.typicode.com/posts?userId=${userId}`;\n  const response = await fetch(url, {\n    signal\n  });\n  return response.json();\n}","map":{"version":3,"sources":["/Users/austinjones/Documents/thinkful/react-router/assignment/src/api/index.js"],"names":["deletePost","ignoreAbortError","deletePostDelegate","fetchUsersWithPosts","fetchUsersWithPostsDelegate","fetchUserWithPosts","fetchUserWithPostsDelegate","delegate","delegateArguments","apply","error","name","postId","signal","url","response","fetch","method","json","userId","status","Error","user","posts","fetchPostsForUser","users","fetchUsers","Promise","all","map","id","then"],"mappings":"AAAA,OAAO,MAAMA,UAAU,GAAGC,gBAAgB,CAACC,kBAAD,CAAnC;AACP,OAAO,MAAMC,mBAAmB,GAAGF,gBAAgB,CACjDG,2BADiD,CAA5C;AAGP,OAAO,MAAMC,kBAAkB,GAAGJ,gBAAgB,CAACK,0BAAD,CAA3C;;AAEP,SAASL,gBAAT,CAA0BM,QAA1B,EAAoC;AAClC,SAAO,OAAO,GAAGC,iBAAV,KAAgC;AACrC,QAAI;AACF,aAAO,MAAMD,QAAQ,CAACE,KAAT,CAAe,IAAf,EAAqBD,iBAArB,CAAb;AACD,KAFD,CAEE,OAAOE,KAAP,EAAc;AACd,UAAIA,KAAK,CAACC,IAAN,KAAe,YAAnB,EAAiC;AAC/B,cAAMD,KAAN;AACD;AACF;AACF,GARD;AASD;;AAED,eAAeR,kBAAf,CAAkCU,MAAlC,EAA0CC,MAA1C,EAAkD;AAChD,QAAMC,GAAG,GAAI,8CAA6CF,MAAO,EAAjE;AACA,QAAMG,QAAQ,GAAG,MAAMC,KAAK,CAACF,GAAD,EAAM;AAAEG,IAAAA,MAAM,EAAE,QAAV;AAAoBJ,IAAAA;AAApB,GAAN,CAA5B;AACA,SAAOE,QAAQ,CAACG,IAAT,EAAP;AACD;;AAED,eAAeZ,0BAAf,CAA0Ca,MAA1C,EAAkDN,MAAlD,EAA0D;AACxD,QAAMC,GAAG,GAAI,8CAA6CK,MAAO,EAAjE;AACA,QAAMJ,QAAQ,GAAG,MAAMC,KAAK,CAACF,GAAD,EAAM;AAAED,IAAAA;AAAF,GAAN,CAA5B;;AACA,MAAIE,QAAQ,CAACK,MAAT,KAAoB,GAAxB,EAA6B;AAC3B,UAAM,IAAIC,KAAJ,CAAW,2BAA0BF,MAAO,EAA5C,CAAN;AACD;;AACD,QAAMG,IAAI,GAAG,MAAMP,QAAQ,CAACG,IAAT,EAAnB;AACAI,EAAAA,IAAI,CAACC,KAAL,GAAa,MAAMC,iBAAiB,CAACL,MAAD,EAASN,MAAT,CAApC;AACA,SAAOS,IAAP;AACD;;AAED,eAAelB,2BAAf,CAA2CS,MAA3C,EAAmD;AACjD,MAAI;AACF,UAAMY,KAAK,GAAG,MAAMC,UAAU,CAACb,MAAD,CAA9B;AACA,WAAO,MAAMc,OAAO,CAACC,GAAR,CACXH,KAAK,CAACI,GAAN,CAAWP,IAAD,IACRE,iBAAiB,CAACF,IAAI,CAACQ,EAAN,EAAUjB,MAAV,CAAjB,CAAmCkB,IAAnC,CAAyCR,KAAD,IAAW;AACjDD,MAAAA,IAAI,CAACC,KAAL,GAAaA,KAAb;AACA,aAAOD,IAAP;AACD,KAHD,CADF,CADW,CAAb;AAQD,GAVD,CAUE,OAAOZ,KAAP,EAAc;AACd,QAAIA,KAAK,CAACC,IAAN,KAAe,YAAnB,EAAiC;AAC/B,YAAMD,KAAN;AACD;AACF;AACF;;AAED,eAAegB,UAAf,CAA0Bb,MAA1B,EAAkC;AAChC,QAAMC,GAAG,GAAI,4CAAb;AACA,QAAMC,QAAQ,GAAG,MAAMC,KAAK,CAACF,GAAD,EAAM;AAAED,IAAAA;AAAF,GAAN,CAA5B;AACA,SAAOE,QAAQ,CAACG,IAAT,EAAP;AACD;;AAED,eAAeM,iBAAf,CAAiCL,MAAjC,EAAyCN,MAAzC,EAAiD;AAC/C,QAAMC,GAAG,GAAI,qDAAoDK,MAAO,EAAxE;AACA,QAAMJ,QAAQ,GAAG,MAAMC,KAAK,CAACF,GAAD,EAAM;AAAED,IAAAA;AAAF,GAAN,CAA5B;AACA,SAAOE,QAAQ,CAACG,IAAT,EAAP;AACD","sourcesContent":["export const deletePost = ignoreAbortError(deletePostDelegate);\nexport const fetchUsersWithPosts = ignoreAbortError(\n  fetchUsersWithPostsDelegate\n);\nexport const fetchUserWithPosts = ignoreAbortError(fetchUserWithPostsDelegate);\n\nfunction ignoreAbortError(delegate) {\n  return async (...delegateArguments) => {\n    try {\n      return await delegate.apply(null, delegateArguments);\n    } catch (error) {\n      if (error.name !== \"AbortError\") {\n        throw error;\n      }\n    }\n  };\n}\n\nasync function deletePostDelegate(postId, signal) {\n  const url = `https://jsonplaceholder.typicode.com/posts/${postId}`;\n  const response = await fetch(url, { method: \"DELETE\", signal });\n  return response.json();\n}\n\nasync function fetchUserWithPostsDelegate(userId, signal) {\n  const url = `https://jsonplaceholder.typicode.com/users/${userId}`;\n  const response = await fetch(url, { signal });\n  if (response.status !== 200) {\n    throw new Error(`User not found with ID: ${userId}`);\n  }\n  const user = await response.json();\n  user.posts = await fetchPostsForUser(userId, signal);\n  return user;\n}\n\nasync function fetchUsersWithPostsDelegate(signal) {\n  try {\n    const users = await fetchUsers(signal);\n    return await Promise.all(\n      users.map((user) =>\n        fetchPostsForUser(user.id, signal).then((posts) => {\n          user.posts = posts;\n          return user;\n        })\n      )\n    );\n  } catch (error) {\n    if (error.name !== \"AbortError\") {\n      throw error;\n    }\n  }\n}\n\nasync function fetchUsers(signal) {\n  const url = `https://jsonplaceholder.typicode.com/users`;\n  const response = await fetch(url, { signal });\n  return response.json();\n}\n\nasync function fetchPostsForUser(userId, signal) {\n  const url = `https://jsonplaceholder.typicode.com/posts?userId=${userId}`;\n  const response = await fetch(url, { signal });\n  return response.json();\n}\n"]},"metadata":{},"sourceType":"module"}